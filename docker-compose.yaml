version: '3.8'

services:

    todo-ui:

        # всегда стартует после падения или перезапуска системы
        restart: always

        # ждёт пока не соберётся и не запустится контейнер с бэкендом
        depends_on:
            - todo-backend

    todo-backend:

        build:
            context: ./todo-backend
            dockerfile: Dockerfile

        image: todo-backend:0.1.0

        container_name: todo-backend

        # stdin_open: true

        # tty: true

        restart: always

        # весь трафик на поступающий на 9000 порт на локальной машине
        # отправляется на 8000 порт внутри контейнера
        ports:
            - 9000:8000

        environment:
            HOST: 0.0.0.0
            PORT: 8000

        # монтирование конфиг файла снаружи в конфиг файл внутри контейнера
        volumes:
            - ./config-todo-backend/config.py:/app/config/config.py/:ro

        depends_on:
            - todo-postgres
            - todo-kafka

    notifier:

        build:
            context: ./notifier
            dockerfile: Dockerfile

        image: notifier:0.1.0

        container_name: notifier

        # stdin_open: true

        # tty: true

        restart: always

        ports:
            - 8010:8010

        environment:
            HOST: 0.0.0.0
            PORT: 8010

        volumes:
            - ./config-notifier/config.py:/app/config/config.py/:ro

        depends_on:
            - todo-postgres
            - todo-kafka

    todo-postgres:

        image: postgres:14.5

        container_name: todo-postgres

        restart: always

        ports:
            - 6432:5432

        # файл с переменными
        env_file:
            - backend.env

        volumes:
            - ./postgres-data/:/var/lib/postgresql/data/
            - ./postgres-init/:/docker-entrypoint-initdb.d/

    todo-zoo:

        image: bitnami/zookeeper:3.8.0-debian-11-r70

        container_name: todo-zoo

        restart: always

        ports:
            - 2181:2181

        environment:
            ALLOW_ANONYMOUS_LOGIN: 'yes'

        volumes:
            - ./zookeeper-data:/bitnami/zookeeper:rw

    todo-kafka:

        image: bitnami/kafka:3.3.1-debian-11-r25

        container_name: todo-kafka

        restart: always

        ports:
            - 9092:9092

        environment:
            KAFKA_CFG_ZOOKEEPER_CONNECT: todo-zoo:2181
            KAFKA_CFG_LISTENERS: PLAINTEXT://todo-kafka:9092
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://todo-kafka:9092
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
            ALLOW_PLAINTEXT_LISTENER: 'yes'

        volumes:
            - ./kafka-data:/bitnami/kafka:rw

        depends_on:
            - todo-zoo

    # для создания SSL сертификтов в letsencrypt
    certbot:
        image: certbot/certbot

        volumes:
            - ./certs/certbot/conf/:/etc/letsencrypt:rw
            - ./certs/certbot/www/:/var/www/certbot:rw

        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
